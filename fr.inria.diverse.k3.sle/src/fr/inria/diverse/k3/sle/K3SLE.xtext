grammar fr.inria.diverse.k3.sle.K3SLE with org.eclipse.xtext.xbase.Xbase

generate k3sle "http://www.inria.fr/diverse/k3/sle/"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

ModelRoot:
	PackageDecl?
	(imports = XImportSection)?
	(elements += Declaration)*
;

PackageDecl:
	'package' name = QualifiedName
;

Declaration:
	MetamodelDecl | ModelTypeDecl | TransformationDecl
;

MetamodelDecl:
	'metamodel' name = ValidID ('inherits' superMetamodels += [MetamodelDecl | QualifiedName] (',' superMetamodels += [MetamodelDecl | QualifiedName])*)? '{'
		(ecores += EcoreDecl | aspects += AspectDecl)*
		(
			'features' '{'
				(features += FeatureDef)*
			'}'
		)?
	'}'
;

ModelTypeDecl:
	'modeltype' name = ValidID ('extract' extracted = [MetamodelDecl | QualifiedName])? '{'
		(
			'features' '{'
				(features += FeatureDecl)*
			'}'
		)?
	'}'
;

TransformationDecl:
	(main ?= '@Main')?
	'transformation' name = ValidID '(' (parameters += FullJvmFormalParameter (',' parameters += FullJvmFormalParameter)*)? ')'
	body = XBlockExpression
;

EcoreDecl:
	'ecore' uri = STRING
;

AspectDecl:
	'aspect' type = [jvmTypes::JvmGenericType | QualifiedName]
;

FeatureDef:
	AttributeDef | OperationDef
;

FeatureDecl:
	AttributeDef | OperationDecl
;

AttributeDef:
	'attribute' name = ValidID ':' type = JvmTypeReference
;

OperationDef:
	OperationSignature
	body = XBlockExpression
;

OperationDecl:
	OperationSignature
;

OperationSignature:
	'operation' name = ValidID '(' (parameters += FullJvmFormalParameter (',' parameters += FullJvmFormalParameter)*)? ')'
;
